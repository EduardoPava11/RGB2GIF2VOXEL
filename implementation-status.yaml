# RGB2GIF2VOXEL Implementation Status - Simplified MVP
# Focus: Get basic GIF creation working with stability and performance

version: "1.0"
last_updated: "2025-09-21"
goal: "Capture 256 frames → Process → Create animated GIF"

# ============================================================================
# CURRENT BUILD STATUS
# ============================================================================
build:
  status: "✅ BUILDS SUCCESSFULLY"
  issues_resolved:
    - "Fixed duplicate DownsampleError definitions"
    - "Fixed vImage buffer mutability (var instead of let)"
    - "Removed duplicate MainCaptureView.swift from Views/"
    - "Consolidated FFI through RustProcessor wrapper"

# ============================================================================
# WORKING COMPONENTS
# ============================================================================
working:
  ui_layer:
    - "✅ SwiftUI app structure"
    - "✅ Camera permission requests"
    - "✅ Live camera preview (AVCaptureVideoPreviewLayer)"
    - "✅ Capture button and progress UI"
    - "✅ Frame counter (0-256)"
    - "✅ Settings and Gallery views"

  camera_pipeline:
    - "✅ CubeCameraManagerOptimized setup"
    - "✅ AVCaptureSession configuration"
    - "✅ BGRA pixel buffer capture"
    - "✅ Stride-aware memory handling"

  processing:
    - "✅ vImage Lanczos3 downsampling (1080→256)"
    - "✅ Batch processing with concurrency control"
    - "✅ Memory-safe buffer operations"

  rust_integration:
    - "✅ RustCore.xcframework linked"
    - "✅ FFI declarations in RustFFI.swift"
    - "✅ RustProcessor wrapper class"
    - "✅ Single bridging header"

# ============================================================================
# NOT YET CONNECTED
# ============================================================================
needs_wiring:
  capture_to_processing:
    issue: "Camera frames not actually processed"
    fix: |
      CubeCameraManagerOptimized needs to:
      1. Actually capture frames in processFrame()
      2. Send to CubeProcessor/SafeCubeProcessor
      3. Accumulate 256 frames
      4. Trigger processing pipeline

  rust_processing:
    issue: "Rust functions not called with real data"
    fix: |
      RustProcessor.processBatch() needs to:
      1. Receive actual frame data
      2. Call yx_proc_batch_rgba8 with proper pointers
      3. Return quantized indices and palettes

  gif_creation:
    issue: "GIF encoding not producing output"
    fix: |
      Need to:
      1. Call yx_gif_encode with tensor data
      2. Write output to file
      3. Return URL to UI

# ============================================================================
# SIMPLIFIED MVP PIPELINE
# ============================================================================
mvp_pipeline:
  step1_capture:
    input: "User taps capture button"
    process: |
      for i in 0..<256:
        frame = camera.captureFrame()  # 1080×1080 BGRA
        frames.append(frame)
        updateUI(progress: i/256)

  step2_downsample:
    input: "256 frames @ 1080×1080"
    process: |
      downsized = VImageDownsampler.batchDownsample(
        frames, from: 1080, to: 256
      )
    output: "256 frames @ 256×256"

  step3_quantize:
    input: "256 frames @ 256×256 BGRA"
    process: |
      (indices, palettes) = RustProcessor.processBatch(
        frames: downsized,
        width: 256, height: 256,
        targetSize: 256, paletteSize: 256
      )
    output: "256×256×256 indices + 256 palettes"

  step4_encode:
    input: "Tensor + palettes"
    process: |
      gifData = RustProcessor.encodeGIF(
        indices: indices,
        palettes: palettes,
        frameCount: 256,
        side: 256,
        fps: 30
      )
    output: "GIF89a data"

  step5_save:
    input: "GIF data"
    process: |
      url = documentsDir.append("output.gif")
      gifData.write(to: url)
      PHPhotoLibrary.save(url)
    output: "Saved GIF"

# ============================================================================
# PERFORMANCE REQUIREMENTS
# ============================================================================
performance:
  capture:
    target: "30 fps sustained"
    current: "Unknown - needs testing"

  processing:
    target: "< 5 seconds for 256 frames"
    current: "Unknown - not connected"

  memory:
    target: "< 1.5 GB peak"
    current: "Likely OK with batch processing"

# ============================================================================
# NEXT STEPS (Priority Order)
# ============================================================================
next_steps:
  1_wire_capture:
    priority: "CRITICAL"
    task: "Connect camera output to frame accumulator"
    file: "CubeCameraManagerOptimized.swift"
    method: "processFrame()"

  2_test_rust:
    priority: "CRITICAL"
    task: "Verify Rust FFI with test data"
    test: |
      // Create test frame
      let testData = Data(count: 256*256*4)
      let result = rustProcessor.processBatch([testData], ...)
      assert(result.indices.count == 256*256)

  3_connect_pipeline:
    priority: "HIGH"
    task: "Wire capture → downsample → quantize → encode"
    location: "MainCaptureView.swift startCapture()"

  4_verify_gif:
    priority: "HIGH"
    task: "Ensure valid GIF89a output"
    validation: |
      - Check GIF header (GIF89a)
      - Verify frame count
      - Test in image viewer

  5_optimize:
    priority: "MEDIUM"
    tasks:
      - "Profile memory usage"
      - "Optimize batch sizes"
      - "Add frame skipping for thermal throttling"

# ============================================================================
# SUCCESS CRITERIA
# ============================================================================
success_metrics:
  functionality:
    - "✅ App launches without crash"
    - "✅ Camera preview shows"
    - "⏳ Captures 256 frames"
    - "⏳ Produces valid GIF file"
    - "⏳ GIF animates correctly"

  performance:
    - "⏳ Capture completes in < 10 seconds"
    - "⏳ Processing completes in < 5 seconds"
    - "⏳ No memory warnings"
    - "⏳ No thermal throttling"

  stability:
    - "✅ No duplicate file errors"
    - "✅ Clean build"
    - "⏳ No crashes during capture"
    - "⏳ Handles interruptions gracefully"