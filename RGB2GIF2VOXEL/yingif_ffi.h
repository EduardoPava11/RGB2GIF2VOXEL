#ifndef YINGIF_FFI_H
#define YINGIF_FFI_H

#pragma once

/* Warning: This file is auto-generated by cbindgen. Do not modify manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * Opaque processor struct
 */
typedef struct YinGifProcessor YinGifProcessor;

/**
 * Create a new processor instance
 */
struct YinGifProcessor *yingif_processor_new(void);

/**
 * Free a processor instance
 */
void yingif_processor_free(struct YinGifProcessor *processor);

/**
 * Process a BGRA frame: downsize and quantize colors
 * Returns 0 on success, negative error code on failure
 */
int32_t yingif_process_frame(struct YinGifProcessor *processor,
                             const uint8_t *bgra_data,
                             int32_t width,
                             int32_t height,
                             int32_t target_size,
                             int32_t palette_size,
                             uint8_t *out_indices,
                             uint32_t *out_palette);

/**
 * Create a GIF89a from indexed cube tensor data
 * Returns the size of the created GIF, or negative error code
 */
int32_t yingif_create_gif89a(const uint8_t *indices,
                             const uint32_t *palette,
                             int32_t cube_size,
                             int32_t palette_size,
                             int32_t delay_ms,
                             uint8_t *out_data,
                             int32_t out_capacity,
                             int32_t *out_size);

/**
 * Get estimated buffer size needed for GIF
 */
int32_t yingif_estimate_gif_size(int32_t cube_size, int32_t palette_size);

/**
 * Process batch of RGBA frames: downsample and quantize
 * Returns 0 on success, negative error codes on failure
 */
int yx_proc_batch_rgba8(const unsigned char *const *frames,
                        int n,
                        int width,
                        int height,
                        int target_side,
                        int palette_size,
                        unsigned char *out_indices,
                        uint32_t *out_palettes);

/**
 * Encode indexed frames to GIF89a
 * Returns 0 on success, negative error codes on failure
 */
int yx_gif_encode(const unsigned char *indices,
                  const uint32_t *palettes,
                  int n,
                  int side,
                  int delay_cs,
                  unsigned char *out_buf,
                  uintptr_t *out_len);

#endif  /* YINGIF_FFI_H */
