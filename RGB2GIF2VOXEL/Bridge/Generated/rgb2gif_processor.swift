// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(rgb2gif_processorFFI)
import rgb2gif_processorFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_rgb2gif_processor_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_rgb2gif_processor_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}


public struct GifOpts {
    public var width: UInt16
    public var height: UInt16
    public var frameCount: UInt16
    public var fps: UInt16
    public var loopCount: UInt16
    public var optimize: Bool
    public var includeTensor: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(width: UInt16, height: UInt16, frameCount: UInt16, fps: UInt16, loopCount: UInt16, optimize: Bool, includeTensor: Bool) {
        self.width = width
        self.height = height
        self.frameCount = frameCount
        self.fps = fps
        self.loopCount = loopCount
        self.optimize = optimize
        self.includeTensor = includeTensor
    }
}



extension GifOpts: Equatable, Hashable {
    public static func ==(lhs: GifOpts, rhs: GifOpts) -> Bool {
        if lhs.width != rhs.width {
            return false
        }
        if lhs.height != rhs.height {
            return false
        }
        if lhs.frameCount != rhs.frameCount {
            return false
        }
        if lhs.fps != rhs.fps {
            return false
        }
        if lhs.loopCount != rhs.loopCount {
            return false
        }
        if lhs.optimize != rhs.optimize {
            return false
        }
        if lhs.includeTensor != rhs.includeTensor {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(width)
        hasher.combine(height)
        hasher.combine(frameCount)
        hasher.combine(fps)
        hasher.combine(loopCount)
        hasher.combine(optimize)
        hasher.combine(includeTensor)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGifOpts: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GifOpts {
        return
            try GifOpts(
                width: FfiConverterUInt16.read(from: &buf), 
                height: FfiConverterUInt16.read(from: &buf), 
                frameCount: FfiConverterUInt16.read(from: &buf), 
                fps: FfiConverterUInt16.read(from: &buf), 
                loopCount: FfiConverterUInt16.read(from: &buf), 
                optimize: FfiConverterBool.read(from: &buf), 
                includeTensor: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: GifOpts, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.width, into: &buf)
        FfiConverterUInt16.write(value.height, into: &buf)
        FfiConverterUInt16.write(value.frameCount, into: &buf)
        FfiConverterUInt16.write(value.fps, into: &buf)
        FfiConverterUInt16.write(value.loopCount, into: &buf)
        FfiConverterBool.write(value.optimize, into: &buf)
        FfiConverterBool.write(value.includeTensor, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGifOpts_lift(_ buf: RustBuffer) throws -> GifOpts {
    return try FfiConverterTypeGifOpts.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGifOpts_lower(_ value: GifOpts) -> RustBuffer {
    return FfiConverterTypeGifOpts.lower(value)
}


public struct ProcessResult {
    public var gifData: Data
    public var tensorData: Data?
    public var finalFileSize: UInt32
    public var processingTimeMs: Float
    public var actualFrameCount: UInt16
    public var paletteSizeUsed: UInt16

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(gifData: Data, tensorData: Data?, finalFileSize: UInt32, processingTimeMs: Float, actualFrameCount: UInt16, paletteSizeUsed: UInt16) {
        self.gifData = gifData
        self.tensorData = tensorData
        self.finalFileSize = finalFileSize
        self.processingTimeMs = processingTimeMs
        self.actualFrameCount = actualFrameCount
        self.paletteSizeUsed = paletteSizeUsed
    }
}



extension ProcessResult: Equatable, Hashable {
    public static func ==(lhs: ProcessResult, rhs: ProcessResult) -> Bool {
        if lhs.gifData != rhs.gifData {
            return false
        }
        if lhs.tensorData != rhs.tensorData {
            return false
        }
        if lhs.finalFileSize != rhs.finalFileSize {
            return false
        }
        if lhs.processingTimeMs != rhs.processingTimeMs {
            return false
        }
        if lhs.actualFrameCount != rhs.actualFrameCount {
            return false
        }
        if lhs.paletteSizeUsed != rhs.paletteSizeUsed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(gifData)
        hasher.combine(tensorData)
        hasher.combine(finalFileSize)
        hasher.combine(processingTimeMs)
        hasher.combine(actualFrameCount)
        hasher.combine(paletteSizeUsed)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProcessResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProcessResult {
        return
            try ProcessResult(
                gifData: FfiConverterData.read(from: &buf), 
                tensorData: FfiConverterOptionData.read(from: &buf), 
                finalFileSize: FfiConverterUInt32.read(from: &buf), 
                processingTimeMs: FfiConverterFloat.read(from: &buf), 
                actualFrameCount: FfiConverterUInt16.read(from: &buf), 
                paletteSizeUsed: FfiConverterUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: ProcessResult, into buf: inout [UInt8]) {
        FfiConverterData.write(value.gifData, into: &buf)
        FfiConverterOptionData.write(value.tensorData, into: &buf)
        FfiConverterUInt32.write(value.finalFileSize, into: &buf)
        FfiConverterFloat.write(value.processingTimeMs, into: &buf)
        FfiConverterUInt16.write(value.actualFrameCount, into: &buf)
        FfiConverterUInt16.write(value.paletteSizeUsed, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProcessResult_lift(_ buf: RustBuffer) throws -> ProcessResult {
    return try FfiConverterTypeProcessResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProcessResult_lower(_ value: ProcessResult) -> RustBuffer {
    return FfiConverterTypeProcessResult.lower(value)
}


public struct QuantizeOpts {
    public var qualityMin: UInt8
    public var qualityMax: UInt8
    public var speed: Int32
    public var paletteSize: UInt16
    public var ditheringLevel: Float
    public var sharedPalette: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(qualityMin: UInt8, qualityMax: UInt8, speed: Int32, paletteSize: UInt16, ditheringLevel: Float, sharedPalette: Bool) {
        self.qualityMin = qualityMin
        self.qualityMax = qualityMax
        self.speed = speed
        self.paletteSize = paletteSize
        self.ditheringLevel = ditheringLevel
        self.sharedPalette = sharedPalette
    }
}



extension QuantizeOpts: Equatable, Hashable {
    public static func ==(lhs: QuantizeOpts, rhs: QuantizeOpts) -> Bool {
        if lhs.qualityMin != rhs.qualityMin {
            return false
        }
        if lhs.qualityMax != rhs.qualityMax {
            return false
        }
        if lhs.speed != rhs.speed {
            return false
        }
        if lhs.paletteSize != rhs.paletteSize {
            return false
        }
        if lhs.ditheringLevel != rhs.ditheringLevel {
            return false
        }
        if lhs.sharedPalette != rhs.sharedPalette {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(qualityMin)
        hasher.combine(qualityMax)
        hasher.combine(speed)
        hasher.combine(paletteSize)
        hasher.combine(ditheringLevel)
        hasher.combine(sharedPalette)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeQuantizeOpts: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> QuantizeOpts {
        return
            try QuantizeOpts(
                qualityMin: FfiConverterUInt8.read(from: &buf), 
                qualityMax: FfiConverterUInt8.read(from: &buf), 
                speed: FfiConverterInt32.read(from: &buf), 
                paletteSize: FfiConverterUInt16.read(from: &buf), 
                ditheringLevel: FfiConverterFloat.read(from: &buf), 
                sharedPalette: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: QuantizeOpts, into buf: inout [UInt8]) {
        FfiConverterUInt8.write(value.qualityMin, into: &buf)
        FfiConverterUInt8.write(value.qualityMax, into: &buf)
        FfiConverterInt32.write(value.speed, into: &buf)
        FfiConverterUInt16.write(value.paletteSize, into: &buf)
        FfiConverterFloat.write(value.ditheringLevel, into: &buf)
        FfiConverterBool.write(value.sharedPalette, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQuantizeOpts_lift(_ buf: RustBuffer) throws -> QuantizeOpts {
    return try FfiConverterTypeQuantizeOpts.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQuantizeOpts_lower(_ value: QuantizeOpts) -> RustBuffer {
    return FfiConverterTypeQuantizeOpts.lower(value)
}


public enum ProcessorError {

    
    
    case QuantizationError(message: String)
    
    case EncodingError(message: String)
    
    case InvalidInput(message: String)
    
    case MemoryError(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProcessorError: FfiConverterRustBuffer {
    typealias SwiftType = ProcessorError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProcessorError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .QuantizationError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .EncodingError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .InvalidInput(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .MemoryError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ProcessorError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .QuantizationError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .EncodingError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .InvalidInput(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .MemoryError(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))

        
        }
    }
}


extension ProcessorError: Equatable, Hashable {}

extension ProcessorError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}
public func calculateBufferSize(width: UInt32, height: UInt32, frameCount: UInt32) -> UInt32 {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_rgb2gif_processor_fn_func_calculate_buffer_size(
        FfiConverterUInt32.lower(width),
        FfiConverterUInt32.lower(height),
        FfiConverterUInt32.lower(frameCount),$0
    )
})
}
public func processAllFrames(framesRgba: Data, width: UInt32, height: UInt32, frameCount: UInt32, quantizeOpts: QuantizeOpts, gifOpts: GifOpts)throws  -> ProcessResult {
    return try  FfiConverterTypeProcessResult.lift(try rustCallWithError(FfiConverterTypeProcessorError.lift) {
    uniffi_rgb2gif_processor_fn_func_process_all_frames(
        FfiConverterData.lower(framesRgba),
        FfiConverterUInt32.lower(width),
        FfiConverterUInt32.lower(height),
        FfiConverterUInt32.lower(frameCount),
        FfiConverterTypeQuantizeOpts.lower(quantizeOpts),
        FfiConverterTypeGifOpts.lower(gifOpts),$0
    )
})
}
public func validateBuffer(buffer: Data, expectedSize: UInt32) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_rgb2gif_processor_fn_func_validate_buffer(
        FfiConverterData.lower(buffer),
        FfiConverterUInt32.lower(expectedSize),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_rgb2gif_processor_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_rgb2gif_processor_checksum_func_calculate_buffer_size() != 7205) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rgb2gif_processor_checksum_func_process_all_frames() != 62849) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rgb2gif_processor_checksum_func_validate_buffer() != 46022) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all